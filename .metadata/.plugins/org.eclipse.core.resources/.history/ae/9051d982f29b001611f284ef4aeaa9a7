package br.com.onpecas.controller;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import br.com.onpecas.helper.Alerta;
import br.com.onpecas.helper.Helper;
import br.com.onpecas.model.*;
import br.com.onpecas.view.CallScene;
import javafx.beans.value.*;
import javafx.collections.*;
import javafx.fxml.*;
import javafx.scene.control.*;
import javafx.scene.control.cell.*;

public class TransportadoraInicialController implements Initializable{

	@FXML TableView<Transportadora> tblTransportadoras;
	@FXML TableColumn<Transportadora, String> clnNomeExibicao, clnCidade,clnFretePadrao,  clnEstado, clnObservacao;
	@FXML Button btnEditar, btnAdicionar, btnExcluir, btnLimparFiltro, btnFiltrar;
	@FXML TextField txtNomeTransp;
	@FXML ComboBox<Cidade> cboCidade;
	@FXML ComboBox<Estado> cboEstado;

	CallScene callscene;
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		callscene = new CallScene();
		AtualizarTblTransportadora();
		AtribuirBotoes();

		/*
		 * Listener que auxilia na atualização da tabela
		 * quando é inserido ou atualizado uma transportadora
		 * a variavel AUXTRANSPORTADORA muda para o valor 1
		 * então esse Listener detecta e atualiza a tblTransportadoras
		 * */
		Helper.AUXTRANSPORTADORA.addListener(new ChangeListener<Object>() {
		     @Override
		     public void changed(ObservableValue<?> observableValue, Object oldValue,
		         Object newValue) {
		         int newValuenovo =Integer.parseInt(newValue.toString());
		         if(newValuenovo == 1){
		            AtualizarTblTransportadora();
		            Helper.AUXTRANSPORTADORA.setValue(0);
		         }else{

		         }
		     }
		   });
	}

	/*
	 * Método utilizado para atribuir ações e dados à alguns itens da tela
	 * */
	public void AtribuirBotoes(){
		cboEstado.getItems().addAll(Estado.Select());
		btnAdicionar.setOnAction(l-> AdicionarTransportadora() );
		btnExcluir.setOnAction(l-> ExcluirTransportadora());
		btnEditar.setOnAction(l-> AtualizarTransportadora());
	}

	@FXML
	private void handleComboBoxAction() {
		Estado estado = cboEstado.getSelectionModel().getSelectedItem();

		if(estado != null){
			CarregarCidades(estado);
		}
	}

	/*
	 * Método para preencher a combobox cboCidade após selecionar um estado
	 * */
	public void CarregarCidades(Estado estado){
		cboCidade.getItems().clear();
		cboCidade.getItems().addAll(Cidade.BuscarCidade(estado));
	}

	/*
	 * Método utilizado para excluir uma transportadora que foi selecionada na tblTransportadoras
	 * */
	private void ExcluirTransportadora() {
		Transportadora transportadora = tblTransportadoras.getSelectionModel().getSelectedItem();

		int result = JOptionPane.showConfirmDialog(null,"Deseja Excluir ? ","Excluir",JOptionPane.YES_NO_CANCEL_OPTION);

        if(result ==JOptionPane.YES_OPTION){
        	if(transportadora == null){
    			Alerta.showError("Erro ao Excluir", "Selecione uma Transportadora");
    		}else{
    			Transportadora.Delete(transportadora);
    			Helper.AUXTRANSPORTADORA.setValue(1);
    		}
        }
	}

	/*
	 * Método que chama a tela para adicionar uma transportadora
	 * */
	public void AdicionarTransportadora(){
		callscene.LoadTransportadoraCadastroDetalhe(null);
	}

	public void Filtrar(){
		String nomeTransp = txtNomeTransp.getText();
		Estado estado = cboEstado.getSelectionModel().getSelectedItem();
		Cidade cidade = cboCidade.getSelectionModel().getSelectedItem();

		if(!nomeTransp.isEmpty()){
			if(estado!= null){
				if(cidade != null){
					//Filtrar pelo nome da transportadora e pela cidade
				}else{
					//Filtrar pelo Nome da Transportadora e pelo estado
				}
			}else{
				//Filtrar por nome da transportadora
			}
		}else if(estado != null){
			if(cidade != null){
				//Filtrar pelas cidade
			}else{
				//filtrar pelo estado
			}
		}else{
			Alerta.showError("Não foi possivel Filtrar", "É preciso selecionar/preecher algum campo de filtro");

		}
	}
	/*
	 * Método que chama a tela para atualizar a transportadora que foi selecionada na tblTransportadoras
	 * */
	public void AtualizarTransportadora(){
		Transportadora transportadora = tblTransportadoras.getSelectionModel().getSelectedItem();

		if(transportadora == null){
			Alerta.showError("Erro ao Editar", "Selecione uma Transportadora");
		}else{
			callscene.LoadTransportadoraCadastroDetalhe(transportadora);
		}
	}

	/*
	 * Método utilizado para carregar os dados da table tblTransportadoras
	 * */
	public void AtualizarTblTransportadora(){
		clnNomeExibicao.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("nome"));
		clnFretePadrao.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("frete"));
		clnCidade.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("cidade"));
		clnEstado.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("estado"));
		clnObservacao.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("observacoes"));

        List<Transportadora> lstTransportadora = Transportadora.Select();
        ObservableList<Transportadora> data = FXCollections.observableList(lstTransportadora);

        tblTransportadoras.setItems(data);
    }

	/*
	 * Método utilizado para carregar os dados da table tblTransportadoras com os filtros selecionados
	 * */
    public void AtualizarTblTransportadoraComFiltro(List<Transportadora> lstTransportadora){

    	clnNomeExibicao.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("nome"));
		clnFretePadrao.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("frete"));
		clnCidade.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("cidade"));
		clnEstado.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("estado"));
		clnObservacao.setCellValueFactory(new PropertyValueFactory<Transportadora, String>("observacoes"));

        ObservableList<Transportadora> data = FXCollections.observableList(lstTransportadora);

        tblTransportadoras.setItems(data);
    }
}
