package br.com.onpecas.model;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import br.com.onpecas.helper.MySqlConnect;

public class Relatorio {

	//Classe criada para realizar as buscas no banco de dados, filtrando de acordo com o que foi selecionado no controller

	public static List<HashMap<Integer,String>> ListarFaturamento(String periodo){
		Connection con = MySqlConnect.ConectarDb();
		List<HashMap<Integer,String>> lstMap = new ArrayList<>();

		if(periodo.equals("Anual")){
			String sql ="select *, extract(year from dtrealizado) as datareferencia, sum(valortotal)+sum(frete) as ValorFaturado from visualizacaorelatorios group by extract(year from dtrealizado) ;";

			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();

					itemHash.put(1, rs.getString("datareferencia"));
					itemHash.put(2, rs.getString("ValorFaturado"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}else if(periodo.equals("Mensal")){
			String sql ="select *,concat(extract(month from dtrealizado),' - ', extract(year from dtrealizado)) as datareferencia, sum(valortotal)+sum(frete) as ValorFaturado from visualizacaorelatorios group by extract(year from dtrealizado), extract(month from dtrealizado) ;";

			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();

					itemHash.put(1, rs.getString("datareferencia"));
					itemHash.put(2, rs.getString("ValorFaturado"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}else if(periodo.equals("Semanal")){
			String sql = "select *,"+
					"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Sunday'), '%X%V %W'), '%d/%m/%y') as semanainicial, "+
					"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Saturday'), '%X%V %W'), '%d/%m/%y') as semanafinal, "+
					"sum(valortotal)+sum(frete) as ValorFaturado "+
					"from visualizacaorelatorios group by yearweek(dtrealizado) ;";
			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();
					String datareferencia = String.format("De %s até %s", rs.getString("semanainicial"), rs.getString("semanafinal"));

					itemHash.put(1, datareferencia);
					itemHash.put(2, rs.getString("ValorFaturado"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return lstMap;
	}

	public static List<HashMap<Integer,String>> ListarPedido(String periodo){
		Connection con = MySqlConnect.ConectarDb();
		List<HashMap<Integer,String>> lstMap = new ArrayList<>();

		if(periodo.equals("Padrao")){
			String sql ="select count(*) as QtdPedido, extract(year from dtrealizado) as datareferencia, sum(valortotal)+sum(frete) as ValorFaturado "
					+ "from visualizacaorelatorios group by extract(year from dtrealizado) ;";

			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();

					itemHash.put(1, rs.getString("datareferencia"));
					itemHash.put(2, rs.getString("QtdPedido"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}else if(periodo.equals("Anual")){
			String sql ="select count(*) as QtdPedido, extract(year from dtrealizado) as datareferencia, sum(valortotal)+sum(frete) as ValorFaturado "
					+ "from visualizacaorelatorios group by extract(year from dtrealizado) ;";

			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();

					itemHash.put(1, rs.getString("datareferencia"));
					itemHash.put(2, rs.getString("QtdPedido"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}else if(periodo.equals("Mensal")){
			String sql ="select count(*) as QtdPedido,concat(extract(month from dtrealizado),' - ', extract(year from dtrealizado)) as datareferencia, "
					+ "sum(valortotal)+sum(frete) as ValorFaturado from visualizacaorelatorios group by extract(year from dtrealizado), extract(month from dtrealizado) ;";

			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();

					itemHash.put(1, rs.getString("datareferencia"));
					itemHash.put(2, rs.getString("QtdPedido"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}else if(periodo.equals("Semanal")){
			String sql = "select count(*) as QtdPedido, "
					+ "concat('De ', date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Sunday'), '%X%V %W'), '%d/%m/%y'), "
					+ "' Até ', date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Saturday'), '%X%V %W'), '%d/%m/%y')) as datareferencia,"
					+ " sum(valortotal)+sum(frete) as ValorFaturado from visualizacaorelatorios group by yearweek(dtrealizado);";
			try {
				ResultSet rs = con.createStatement().executeQuery(sql);

				while(rs.next()){
					HashMap<Integer,String> itemHash = new HashMap<>();

					itemHash.put(1, rs.getString("datareferencia"));
					itemHash.put(2, rs.getString("QtdPedido"));

					lstMap.add(itemHash);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return lstMap;
	}

	public static List<HashMap<Integer,String>> ListarVenda(String dtInicial){
		//Connection con = MySqlConnect.ConectarDb();
		List<HashMap<Integer,String>> lstMap = new ArrayList<>();

		return lstMap;
	}

	public static List<HashMap<Integer,String>> FiltrarPedido(){
		Connection con = MySqlConnect.ConectarDb();
		List<HashMap<Integer,String>> lstMap = new ArrayList<>();
		String sql = "select p.*, s.*, count(*) as qtdpedido from pedido as p inner join status as s "
				+ "on (p.oid_status = s.oid_status) group by s.oid_status;";
		try {
			ResultSet rs = con.createStatement().executeQuery(sql);

			while(rs.next()){
				HashMap<Integer,String> itemHash = new HashMap<>();

				itemHash.put(1, rs.getString("nome"));
				itemHash.put(2, rs.getString("qtdpedido"));

				lstMap.add(itemHash);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return lstMap;
	}

	public static List<HashMap<Integer,String>> FiltarFaturamento(String periodo, boolean temData, String dataInicial, String dataFinal){
		Connection con = MySqlConnect.ConectarDb();
		List<HashMap<String,String>> lstMap = new ArrayList<>();
		String sql = "";

		if(temData){
			if(periodo.equals("Semanal")){
				sql = "select *,"
						+"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Sunday'), '%X%V %W'), '%d/%m/%y') as semanainicial, "
						+"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Saturday'), '%X%V %W'), '%d/%m/%y') as semanafinal, "
						+"concat('De: ', date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Sunday'), '%X%V %W'), '%d/%m/%y'), ' - Até: ',"
						+"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Saturday'), '%X%V %W'), '%d/%m/%y')) as datareferencia,"
						+"sum(valortotal)+sum(frete) as valorfaturado "
						+"from visualizacaorelatorios "
						+ "where dtrealizado between '"+dataInicial+"' and '"+dataFinal+"' "
						+ "group by yearweek(dtrealizado) ;";

			}else if(periodo.equals("Mensal")){
				sql ="select *,concat(extract(month from dtrealizado),' - ', extract(year from dtrealizado)) as datareferencia, "
						+ "sum(valortotal)+sum(frete) as valorfaturado from visualizacaorelatorios "
						+ "where dtrealizado between '"+dataInicial+"' and '"+dataFinal+"' "
						+ "group by extract(year from dtrealizado), "
						+ "extract(month from dtrealizado) ;";

			}else if(periodo.equals("Anual")){
				sql ="select *, extract(year from dtrealizado) as datareferencia, sum(valortotal)+sum(frete) as valorfaturado "
						+ "from visualizacaorelatorios "
						+ "where dtrealizado between '"+dataInicial+"' and '"+dataFinal+"' "
						+ "group by extract(year from dtrealizado) ;";

			}else if(periodo.equals("Diario")){
				sql = "select *, dtrealizado as datareferencia, "
						+"sum(valortotal)+sum(frete) as valorfaturado "
						+"from visualizacaorelatorios "
						+ "where dtrealizado between '"+dataInicial+"' and '"+dataFinal+"' "
						+ "group by dtrealizado ;";

			}
		}else{
			if(periodo.equals("Semanal")){
				sql = "select *,"
						+"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Sunday'), '%X%V %W'), '%d/%m/%y') as semanainicial, "
						+"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Saturday'), '%X%V %W'), '%d/%m/%y') as semanafinal, "
						+"concat('De: ', date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Sunday'), '%X%V %W'), '%d/%m/%y'), ' - Até: ',"
						+"date_format(STR_TO_DATE(concat(yearweek(dtrealizado), ' Saturday'), '%X%V %W'), '%d/%m/%y')) as datareferencia,"
						+"sum(valortotal)+sum(frete) as valorfaturado "+
						"from visualizacaorelatorios group by yearweek(dtrealizado) ;";

			}else if(periodo.equals("Mensal")){
				sql ="select *,concat(extract(month from dtrealizado),' - ', extract(year from dtrealizado)) as datareferencia, "
						+ "sum(valortotal)+sum(frete) as valorfaturado from visualizacaorelatorios group by extract(year from dtrealizado), "
						+ "extract(month from dtrealizado) ;";

			}else if(periodo.equals("Anual")){
				sql ="select *, extract(year from dtrealizado) as datareferencia, sum(valortotal)+sum(frete) as valorfaturado "
						+ "from visualizacaorelatorios group by extract(year from dtrealizado) ;";

			}else if(periodo.equals("Diario")){
				sql = "select *, dtrealizado as datareferencia, "
						+"sum(valortotal)+sum(frete) as valorfaturado "
						+"from visualizacaorelatorios group by dtrealizado ;";

			}
		}

		try {
			ResultSet rs = con.createStatement().executeQuery(sql);

			while(rs.next()){
				HashMap<String,String> itemHash = new HashMap<>();

				itemHash.put("1", rs.getString("datareferencia"));
				itemHash.put("2", rs.getString("ValorFaturado"));

				lstMap.add(itemHash);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return lstMap;
	}
}
