package br.com.onpecas.controller;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import br.com.onpecas.helper.Alerta;
import br.com.onpecas.model.*;
import br.com.onpecas.view.CallScene;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.*;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

public class LoteSemTransporteInicialController implements Initializable {

	@FXML TableView<Lote> tblLote;
	@FXML TableColumn<Lote, String> clnNumLote, clnDataPrevSaida, clnDataPrevFinal, clnQtdPedido, clnDataCriacao, clnTransportadora;
	@FXML Button btnIniciarTransporte, btnVisualizar, btnLimparFiltro, btnFiltrar;
	@FXML CheckBox chbEmTransporte;
	@FXML ComboBox<Transportadora> cboTransportadora;
	@FXML TextField txtNumLote;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		AtualizarTblLote();
		ConfigurarBotoes();

	}

	public void IniciarTransporte(){
		CallScene callScene = new CallScene();

		callScene.LoadIniciarTransporte();
	}

	public void ConfigurarBotoes(){
		btnVisualizar.setOnAction(l-> CarregarLoteDetalhe());
		btnIniciarTransporte.setOnAction(l-> IniciarTransporte());
		btnLimparFiltro.setOnAction(l-> AtualizarTblLote());
		btnFiltrar.setOnAction(l-> Filtrar());

		cboTransportadora.getItems().addAll(Transportadora.Select());
	}

	@FXML
	private void handleCheckBoxAction() {
		System.out.println("Estou selecionando");
		if(chbEmTransporte.isSelected()){
			txtNumLote.setDisable(true);
			cboTransportadora.setDisable(true);
		}else{
			txtNumLote.setDisable(false);
			cboTransportadora.setDisable(false);
		}
	}

	@FXML
	private void handleComboBoxAction() {
		txtNumLote.setDisable(true);
		chbEmTransporte.setDisable(true);
	}

	public void CarregarLoteDetalhe(){
		CallScene callScene = new CallScene();

		Lote loteSelecionado = tblLote.getSelectionModel().getSelectedItem();

		if(loteSelecionado == null){
			Alerta.showError("Não foi possivel Detalhar", "Selecione um lote para visualizar");
		}else{
			callScene.LoadLoteSemTransporteDetalhe(loteSelecionado);
		}
	}

	public void Filtrar(){
		String numLote = txtNumLote.getText();
		Transportadora transportadora = cboTransportadora.getSelectionModel().getSelectedItem();
		boolean emTransp = chbEmTransporte.isSelected();

		if(!numLote.isEmpty()){
			//Filtrar pelo numero do
		}else if(transportadora != null){
			//Filtrar apenas pelo nome da transportadora
		}else if(emTransp){
			//Filtrar se estiver em transporte
		}else{
			Alerta.showError("Não foi possivel filtrar", "É preciso selecionar/preencher algum campo de filtro");
		}
	}

	public void AtualizarTblLote(){
		clnNumLote.setCellValueFactory(new PropertyValueFactory<Lote, String>("oid_lote"));
		clnDataPrevSaida.setCellValueFactory(new PropertyValueFactory<Lote, String>("data_saida"));
		clnDataPrevFinal.setCellValueFactory(new PropertyValueFactory<Lote, String>("data_entrega"));
		clnQtdPedido.setCellValueFactory(new PropertyValueFactory<Lote, String>("qtdItens"));
		clnDataCriacao.setCellValueFactory(new PropertyValueFactory<Lote, String>("data_criacao"));
		clnTransportadora.setCellValueFactory(new PropertyValueFactory<Lote, String>("nomeTransp"));

		List<Lote> lstLote = Lote.Select();
        ObservableList<Lote> data = FXCollections.observableList(lstLote);

        tblLote.setItems(data);
	}
}
