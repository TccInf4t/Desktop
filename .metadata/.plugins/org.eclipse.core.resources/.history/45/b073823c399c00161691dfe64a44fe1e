package br.com.onpecas.controller;

import java.net.URL;
import java.util.*;

import br.com.onpecas.helper.Alerta;
import br.com.onpecas.helper.Helper;
import br.com.onpecas.helper.Mascaras;
import br.com.onpecas.model.*;
import br.com.onpecas.view.CallScene;
import javafx.beans.value.*;
import javafx.collections.*;
import javafx.fxml.*;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

public class PedidoSemLoteInicialController implements Initializable{

	@FXML TableView<Pedido> tblPedido;
	@FXML TableColumn<Pedido, String> clnNumPedido, clnDtCompra, clnStatus, clnCliente, clnQtdItens, clnEstado, clnCidade;
	@FXML Button btnVisualizar, btnGerarLote, btnFiltrar, btnLimparFiltro;
	@FXML TextField txtNumPedido;
	@FXML DatePicker dtpDataCompra;
	@FXML ComboBox<Estado> cboEstado;
	@FXML ComboBox<Cidade> cboCidade;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		AtualizarTblPedido();
		ConfigurarBotoes();

		Helper.AUXPEDIDOLOTE.addListener(new ChangeListener<Object>() {
		     @Override
		     public void changed(ObservableValue<?> observableValue, Object oldValue,
		         Object newValue) {
		         int newValuenovo =Integer.parseInt(newValue.toString());
		         if(newValuenovo == 1){
		            AtualizarTblPedido();
		            Helper.AUXPEDIDOLOTE.setValue(0);
		         }else{

		         }
		     }
		   });

		txtNumPedido.textProperty().addListener((observable, oldValue, newValue) -> {
		    if(newValue.isEmpty()){
		    	cboCidade.setDisable(false);
				cboEstado.setDisable(false);
				dtpDataCompra.setDisable(false);
		    }else{
		    	cboCidade.setDisable(true);
				cboEstado.setDisable(true);
				dtpDataCompra.setDisable(true);
		    }
		});
	}

	public void ConfigurarBotoes() {
		btnVisualizar.setOnAction(l-> VisualizarPedido());
		btnGerarLote.setOnAction(l-> GerarLote());
		cboEstado.getItems().addAll(Estado.Select());
		Mascaras.mascaraNumeroInteiro(txtNumPedido);
	}

	public void Filtrar(){
		String numPedido = txtNumPedido.getText();
		Cidade cidade = cboCidade.getSelectionModel().getSelectedItem();
		Estado estado = cboEstado.getSelectionModel().getSelectedItem();
		String dataCompra = dtpDataCompra.getValue().toString();

		if(!numPedido.isEmpty()){
			//Filtrar pelo numero do pedido
		}else if(!dataCompra.isEmpty()){
			if(estado!=null){
				if(cidade!=null){
					//Filtrar pela data realizado e pela cidade
				}else{
					//Filtrar pela data realizado e pelo estado
				}
			}else{
				//Filtrar pela data realizad0
			}
		}else if(estado!=null){
			if(cidade!=null){
				//Filtrar pela cidade
			}else{
				//Filtrar pelo estado
			}
		}else{
			Alerta.showError("Não foi possivel filtrar", "É preciso selecionar/preencher algum campo de filtro");
		}
	}

	public void LimparFiltro(){
		AtualizarTblPedido();
		
		cboCidade.setDisable(false);
		cboEstado.setDisable(false);
		dtpDataCompra.setDisable(false);
		
		txtNumPedido.setText("");
		cboCidade.getSelectionModel().clearSelection();
		cboEstado.getSelectionModel().clearSelection();
	}

	@FXML
	private void handleComboBoxAction() {
		Estado estado = cboEstado.getSelectionModel().getSelectedItem();

		if(estado != null){
			CarregarCidades(estado);
		}
	}

	public void CarregarCidades(Estado estado){
		cboCidade.getItems().clear();
		cboCidade.getItems().addAll(Cidade.BuscarCidade(estado));
	}

	public void VisualizarPedido(){
		Pedido pedidoSelecionado = tblPedido.getSelectionModel().getSelectedItem();
		CallScene callScene = new CallScene();
		if(pedidoSelecionado != null){
			callScene.LoadPedidoSemLoteDetalhe(pedidoSelecionado, null);
		}else{
			Alerta.showError("Não foi possivel visualizar", "Selecione ao menos um pedido para servisualizado");
		}
	}

	public void GerarLote(){
		List<Pedido> lstPedidos = tblPedido.getItems();

		if(lstPedidos.size() ==0){
			Alerta.showError("Não foi possivel gerar lote", "A tabela de pedidos está vazia");
		}else{
			CallScene callScene = new CallScene();
			callScene.LoadGerarLote(lstPedidos);
		}
	}

	public void AtualizarTblPedido(){

		clnCidade.setCellValueFactory(new PropertyValueFactory<Pedido, String>("cidade"));
		clnEstado.setCellValueFactory(new PropertyValueFactory<Pedido, String>("estado"));
		clnNumPedido.setCellValueFactory(new PropertyValueFactory<Pedido, String>("oid_pedido"));
		clnDtCompra.setCellValueFactory(new PropertyValueFactory<Pedido, String>("dtRealizada"));
		clnStatus.setCellValueFactory(new PropertyValueFactory<Pedido, String>("statusedt"));
		clnCliente.setCellValueFactory(new PropertyValueFactory<Pedido, String>("nomeCliente"));
		clnQtdItens.setCellValueFactory(new PropertyValueFactory<Pedido, String>("qtdItens"));

        List<Pedido> lstPedido = Pedido.Select();
        ObservableList<Pedido> data = FXCollections.observableList(lstPedido);

        tblPedido.setItems(data);
	}

	public void AtualizarTblPedidoComFiltro(List<Pedido> lstPedido){

		clnCidade.setCellValueFactory(new PropertyValueFactory<Pedido, String>("cidade"));
		clnEstado.setCellValueFactory(new PropertyValueFactory<Pedido, String>("estado"));
		clnNumPedido.setCellValueFactory(new PropertyValueFactory<Pedido, String>("oid_pedido"));
		clnDtCompra.setCellValueFactory(new PropertyValueFactory<Pedido, String>("dtRealizada"));
		clnStatus.setCellValueFactory(new PropertyValueFactory<Pedido, String>("statusedt"));
		clnCliente.setCellValueFactory(new PropertyValueFactory<Pedido, String>("nomeCliente"));
		clnQtdItens.setCellValueFactory(new PropertyValueFactory<Pedido, String>("qtdItens"));

        ObservableList<Pedido> data = FXCollections.observableList(lstPedido);

        tblPedido.setItems(data);
	}
}
