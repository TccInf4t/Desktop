package br.com.onpecas.controller;

import java.net.URL;
import java.util.*;

import br.com.onpecas.helper.Alerta;
import br.com.onpecas.helper.Helper;
import br.com.onpecas.model.*;
import br.com.onpecas.view.CallScene;
import javafx.beans.value.*;
import javafx.collections.*;
import javafx.fxml.*;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

public class PedidoSemLoteInicialController implements Initializable{

	@FXML TableView<Pedido> tblPedido;
	@FXML TableColumn<Pedido, String> clnNumPedido, clnDtCompra, clnStatus, clnCliente, clnQtdItens, clnEstado, clnCidade;
	@FXML Button btnVisualizar, btnGerarLote, btnFiltrar, btnLimparFiltro;
	@FXML TextField txtNumPedido;
	@FXML DatePicker dtpDataCompra;
	@FXML ComboBox<Estado> cboEstado;
	@FXML ComboBox<Cidade> cboCidade;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		AtualizarTblPedido();
		btnVisualizar.setOnAction(l-> VisualizarPedido());
		btnGerarLote.setOnAction(l-> GerarLote());


		Helper.AUXPEDIDOLOTE.addListener(new ChangeListener<Object>() {
		     @Override
		     public void changed(ObservableValue<?> observableValue, Object oldValue,
		         Object newValue) {
		         int newValuenovo =Integer.parseInt(newValue.toString());
		         if(newValuenovo == 1){
		            AtualizarTblPedido();
		            Helper.AUXPEDIDOLOTE.setValue(0);
		         }else{

		         }
		     }
		   });
	}

	public void Filtrar(){

	}

	public void LimparFiltro(){
		AtualizarTblPedido();
	}

	public void VisualizarPedido(){
		Pedido pedidoSelecionado = tblPedido.getSelectionModel().getSelectedItem();
		CallScene callScene = new CallScene();
		if(pedidoSelecionado != null){
			callScene.LoadPedidoSemLoteDetalhe(pedidoSelecionado, null);
		}else{
			Alerta.showError("Não foi possivel visualizar", "Selecione ao menos um pedido para servisualizado");
		}
	}

	public void GerarLote(){
		List<Pedido> lstPedidos = tblPedido.getItems();

		if(lstPedidos.size() ==0){
			Alerta.showError("Não foi possivel gerar lote", "A tabela de pedidos está vazia");
		}else{
			CallScene callScene = new CallScene();
			callScene.LoadGerarLote(lstPedidos);
		}
	}

	public void AtualizarTblPedido(){

		clnCidade.setCellValueFactory(new PropertyValueFactory<Pedido, String>("cidade"));
		clnEstado.setCellValueFactory(new PropertyValueFactory<Pedido, String>("estado"));
		clnNumPedido.setCellValueFactory(new PropertyValueFactory<Pedido, String>("oid_pedido"));
		clnDtCompra.setCellValueFactory(new PropertyValueFactory<Pedido, String>("dtRealizada"));
		clnStatus.setCellValueFactory(new PropertyValueFactory<Pedido, String>("statusedt"));
		clnCliente.setCellValueFactory(new PropertyValueFactory<Pedido, String>("nomeCliente"));
		clnQtdItens.setCellValueFactory(new PropertyValueFactory<Pedido, String>("qtdItens"));

        List<Pedido> lstPedido = Pedido.Select();
        ObservableList<Pedido> data = FXCollections.observableList(lstPedido);

        tblPedido.setItems(data);
	}

	public void AtualizarTblPedidoComFiltro(List<Pedido> lstPedido){

		clnCidade.setCellValueFactory(new PropertyValueFactory<Pedido, String>("cidade"));
		clnEstado.setCellValueFactory(new PropertyValueFactory<Pedido, String>("estado"));
		clnNumPedido.setCellValueFactory(new PropertyValueFactory<Pedido, String>("oid_pedido"));
		clnDtCompra.setCellValueFactory(new PropertyValueFactory<Pedido, String>("dtRealizada"));
		clnStatus.setCellValueFactory(new PropertyValueFactory<Pedido, String>("statusedt"));
		clnCliente.setCellValueFactory(new PropertyValueFactory<Pedido, String>("nomeCliente"));
		clnQtdItens.setCellValueFactory(new PropertyValueFactory<Pedido, String>("qtdItens"));

        ObservableList<Pedido> data = FXCollections.observableList(lstPedido);

        tblPedido.setItems(data);
	}
}
